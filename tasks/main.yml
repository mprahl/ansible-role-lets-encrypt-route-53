---
- name: update apt cache
  apt:
    update_cache: yes
  when: ansible_os_family == 'Debian'

- name: install openssl and python-boto (Debian)
  apt:
    name: "{{ item }}"
    state: present
  with_items:
  - openssl
  - python-boto
  when: ansible_os_family == 'Debian'

- name: install openssl and python-boto (Red Hat) (Requires EPEL)
  yum:
    name: "{{ item }}"
    state: present
  with_items:
  - openssl
  - python-boto
  when: ansible_os_family == 'RedHat'

- name: install openssl and py27-boto (FreeBSD)
  pkgng:
    name: "{{ item }}"
    state: present
  with_items:
  - openssl
  - py27-boto
  when: ansible_os_family == 'FreeBSD'

- name: "create the {{ ler53_cert_dir }} directory"
  file:
    path: "{{ ler53_cert_dir }}"
    state: directory
    owner: root
    mode: 0755

- name: generate the private key
  command: "openssl genrsa -out \"{{ ler53_cert_dir + '/' + ler53_key_file_name }}\" {{ ler53_key_size }}"
  args:
    creates: "{{ ler53_cert_dir + '/' + ler53_key_file_name }}"

- name: set the private key file permissions
  file:
    path: "{{ ler53_cert_dir + '/' + ler53_key_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"

- name: check if the CSR exists
  stat:
    path: "{{ ler53_cert_dir + '/' + ler53_csr_file_name }}"
  register: ler53_csr_stat

- name: create the OpenSSL configuration file for the CSR
  template:
    src: openssl-request.conf.j2
    dest: "{{ ler53_cert_dir }}/openssl-request.conf"
    owner: root
    mode: 0600
  when: not ler53_csr_stat.stat.exists

- name: generate the CSR
  command: "openssl req -new -sha256 -subj \"/CN={{ ler53_cert_common_name }}\" -config \"{{ ler53_cert_dir }}/openssl-request.conf\"  -key \"{{ ler53_cert_dir + '/' + ler53_key_file_name }}\" -out \"{{ ler53_cert_dir + '/' + ler53_csr_file_name }}\""
  args:
    creates: "{{ ler53_cert_dir + '/' + ler53_csr_file_name }}"

- name: set the CSR file permissions
  file:
    path: "{{ ler53_cert_dir + '/' + ler53_csr_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"

- name: delete the OpenSSL configuration file for the CSR
  file:
    path: "{{ ler53_cert_dir }}/openssl-request.conf"
    state: absent

- name: "create the {{ ler53_account_key_dir }} directory"
  file:
    path: "{{ ler53_account_key_dir }}"
    owner: root
    mode: 0700
    state: directory

- name: generate the Let's Encrypt account key
  command: "openssl genrsa -out \"{{ ler53_account_key_dir + '/' + ler53_account_key_file_name }}\" {{ ler53_account_key_size }}"
  args:
    creates: "{{ ler53_account_key_dir + '/' + ler53_account_key_file_name }}"

- name: set the Let's Encrypt account key file permissions
  file:
    path: "{{ ler53_account_key_dir + '/' + ler53_account_key_file_name }}"
    owner: root
    mode: 0600

- name: initiate the Let's Encrypt challenge
  letsencrypt:
    acme_directory: https://acme-v01.api.letsencrypt.org/directory
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir + '/' + ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir + '/' + ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir + '/' + ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    remaining_days: "{{ ler53_cert_remaining_days_before_renewal }}"
  register: lets_encrypt_challenge

- name: Get the DNS records for the challenge
  route53:
    command: get
    zone: "{{ ler53_route_53_domain }}"
    record: "{{ ler53_cert_common_name }}"
    aws_access_key: "{{ ler53_aws_access_key }}"
    aws_secret_key: "{{ ler53_aws_secret_key }}"
    wait: yes
    type: CNAME
  register: dns

- name: create the DNS records for the challenge
  route53:
    command: create
    zone: "{{ ler53_route_53_domain }}"
    record: "_acme-challenge.{{ item.key }}"
    type: TXT
    ttl: 5
    value: "\"{{ item.value['dns-01']['resource_value'] }}\""
    aws_access_key: "{{ ler53_aws_access_key }}"
    aws_secret_key: "{{ ler53_aws_secret_key }}"
    overwrite: yes
    wait: yes
  with_dict: "{{ lets_encrypt_challenge['challenge_data'] | default({}) }}"

- name: validate the Let's Encrypt challenge
  letsencrypt:
    acme_directory: https://acme-v01.api.letsencrypt.org/directory
    challenge: dns-01
    account_key: "{{ ler53_account_key_dir + '/' + ler53_account_key_file_name }}"
    csr: "{{ ler53_cert_dir + '/' + ler53_csr_file_name }}"
    dest: "{{ ler53_cert_dir + '/' + ler53_cert_file_name }}"
    account_email: "{{ ler53_account_email }}"
    data: "{{ lets_encrypt_challenge }}"

- name: delete the DNS records for the challenge
  route53:
    command: delete
    zone: "{{ ler53_route_53_domain }}"
    record: "_acme-challenge.{{ item.key }}"
    type: TXT
    ttl: 5
    value: "\"{{ item.value['dns-01']['resource_value'] }}\""
    aws_access_key: "{{ ler53_aws_access_key }}"
    aws_secret_key: "{{ ler53_aws_secret_key }}"
  with_dict: "{{ lets_encrypt_challenge['challenge_data'] | default({}) }}"

- name: Re add the previous DNS records for the challenge
  route53:
    command: create
    zone: "{{ ler53_route_53_domain }}"
    record: "{{ dns.set.record }}"
    type: "{{ dns.set.type }}"
    ttl: "{{ dns.set.ttl }}"
    value: "{{ dns.set.value }}"
    aws_access_key: "{{ ler53_aws_access_key }}"
    aws_secret_key: "{{ ler53_aws_secret_key }}"
    overwrite: yes
    wait: yes

- name: set the cert file permissions
  file:
    path: "{{ ler53_cert_dir + '/' + ler53_cert_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"

- name: download the Let's Encrypt intermediate CA
  get_url:
    url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem
    dest: "{{ ler53_cert_dir + '/' + ler53_intermediate_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  register: ler53_intermediate_download_task
  when: ler53_intermediate_download

- name: get content of the certificate
  command: "cat {{ ler53_cert_dir }}/{{ ler53_cert_file_name }}"
  register: ler53_certificate_content
  changed_when: false
  when: ler53_intermediate_download

- name: get content of the intermediate CA
  command: "cat {{ ler53_cert_dir }}/{{ ler53_intermediate_file_name }}"
  register: ler53_intermediate_content
  changed_when: false
  when: ler53_intermediate_download

- name: create a file with the certificate and intermediate CA concatenated
  copy:
    content: "{{ ler53_certificate_content['stdout'] + '\n' + ler53_intermediate_content['stdout'] + '\n' }}"
    dest: "{{ ler53_cert_dir + '/' + ler53_cert_and_intermediate_file_name }}"
    owner: "{{ ler53_cert_files_owner }}"
    group: "{{ ler53_cert_files_group }}"
    mode: "{{ ler53_cert_files_mode }}"
  when: ler53_intermediate_download
